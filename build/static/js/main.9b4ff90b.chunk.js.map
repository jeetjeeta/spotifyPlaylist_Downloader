{"version":3,"sources":["helper.js","Playlist.js","constants.js","IndividualVideos.js","Spinner.js","Download.js","Result.js","App.js","index.js"],"names":["promiseSetTimeOut","time","Promise","resolve","setTimeout","Playlist","props","setIsLoading","setIsDownloadLinkAvailable","setPlaylistName","setBinname","useState","input","setInput","isInputDisabled","length","substr","className","onChange","e","target","value","type","placeholder","onClick","test","input1","fetch","method","mode","headers","body","JSON","stringify","playlistURL","then","res","json","data","console","log","mainData","state","status","binname","playListName","catch","err","alert","IndividualVideos","quality","setDownloadLinks","tracks","split","Spinner","visible","text","classes","color","color1","height","width","timeout","style","class","Download","downloadLinks","playlistName","mainDownload","url","a","document","createElement","setAttribute","dispatchEvent","MouseEvent","ctrlKey","download","Result","playlistLength","App","isDownloadLinkAvailable","isLoading","setPlaylistLength","ReactDOM","render","getElementById"],"mappings":"gUAAMA,G,MAAoB,SAACC,GACzB,OAAO,IAAIC,SAAQ,SAACC,GAClBC,YAAW,WACTD,MACCF,Q,OCsHQI,EArHE,SAACC,GAChB,IACEC,EAMED,EANFC,aACAC,EAKEF,EALFE,2BAEAC,EAGEH,EAHFG,gBACAC,EAEEJ,EAFFI,WAIF,EAA0BC,mBAAS,IAAG,mBAA/BC,EAAK,KAAEC,EAAQ,KA6EhBC,EAAkB,WACtB,QAAIF,EAAMG,QAAU,GAA4B,SAAvBH,EAAMI,OAAO,EAAG,KAO3C,OACE,qBAAKC,UAAU,WAAU,SACvB,sBAAKA,UAAU,gBAAe,UAC5B,uBACEC,SAAU,SAACC,GACTN,EAASM,EAAEC,OAAOC,QAEpBJ,UAAU,YACVK,KAAK,OACLC,YAAY,uCAEd,wBACEN,UAAS,UAAKH,IAAoB,WAAa,IAC/CU,QAASV,IAAoB,aAhGhB,WAGnB,GAFc,sDAEHW,KAAKb,GAAhB,CAKA,IAAIc,EAASd,EAKbL,GAAa,GACbC,GAA2B,GAC3BmB,MAAM,GAAD,OCtBW,GDsBH,6BAA6B,CACxCC,OAAQ,OACRC,KAAM,OACNC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,YAAaR,MAGdS,MAAK,SAACC,GAAG,OAAKA,EAAIC,UAClBF,KAAI,uCAAC,WAAOG,GAAI,iFACfC,QAAQC,IAAIF,GAAM,OAEN,gBACJtC,EAAkB,KAAM,KAAD,kBACX2B,MAAM,GAAD,OCtCb,GDsCqB,sBAAqB,KAAD,EAA1C,OAAHS,EAAG,gBACcA,EAAIC,OAAO,KAAD,EAGE,GAH7BI,EAAQ,OAGdF,QAAQC,IAAI,YAAaC,IACF,IAAnBA,EAASC,MAAe,kCACpB1C,EAAkB,KAAO,KAAD,yCAMZ,GAFpB,EAC0CyC,EAASH,KAA3CK,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAASC,EAAY,EAAZA,aACzBtC,GAAa,GACC,MAAVoC,EAAc,iBAKhB,OAJAJ,QAAQC,IAAIG,GACZlC,EAAgBoC,GAChBnC,EAAWkC,GACXrC,GAAa,GACb,6BAQkB,OAHpBE,EAAgBoC,GAChBrC,GAA2B,GAC3BD,GAAa,GACbG,EAAWkC,GAAS,iEAKvB,mDApCI,IAsCJE,OAAM,SAACC,GAENtC,EAAgB,IAEhB8B,QAAQC,IAAIO,GACZxC,GAAa,GACbG,EAAW,IACXsC,MAAM,sBAnERA,MAAM,0BA4FmD,iCEgBhDC,G,MA5HU,SAAC3C,GASpBA,EAPF4C,QAOE5C,EANFgB,KAFF,IAGEf,EAKED,EALFC,aACAC,EAIEF,EAJFE,2BACA2C,EAGE7C,EAHF6C,iBACA1C,EAEEH,EAFFG,gBACAC,EACEJ,EADFI,WAGF,EAA0BC,mBAAS,IAAG,mBAA/BC,EAAK,KAAEC,EAAQ,KAmFhBC,EAAkB,WACtB,QAAIF,EAAMG,QAAU,GAA4B,SAAvBH,EAAMI,OAAO,EAAG,KAO3C,OACE,qBAAKC,UAAU,mBAAkB,SAC/B,sBAAKA,UAAU,cAAa,UAC1B,uBACEC,SAAU,SAACC,GACTN,EAASM,EAAEC,OAAOC,QAEpBJ,UAAU,YACVK,KAAK,OACLC,YAAY,mDAEd,wBACEN,UAAS,UAAKH,IAAoB,WAAa,IAC/CU,QAASV,IAAoB,aAtGhB,WAInB,GAHc,mDAGHW,KAAKb,GAAhB,CAeA,IAAMwC,EAASxC,EAAMyC,MAAM,KAE3B9C,GAAa,GACbC,GAA2B,GAE3BmB,MAAM,GAAD,ODhCW,GCgCH,+BAA+B,CAC1CC,OAAQ,OACRC,KAAM,OACNC,QAAS,CACP,eAAgB,oBAGlBC,KAAMC,KAAKC,UAAU,CACnBmB,aAGDjB,MAAK,SAACC,GAAG,OAAKA,EAAIC,UAClBF,KAAI,uCAAC,WAAOG,GAAI,+EAEfC,QAAQC,IAAIF,GAAM,OACN,gBACJtC,EAAkB,KAAM,KAAD,kBACX2B,MAAM,GAAD,ODjDb,GCiDqB,sBAAqB,KAAD,EAA1C,OAAHS,EAAG,gBACcA,EAAIC,OAAO,KAAD,EAGE,GAH7BI,EAAQ,OAGdF,QAAQC,IAAI,YAAaC,IACF,IAAnBA,EAASC,MAAe,kCACpB1C,EAAkB,KAAO,KAAD,yCAIT,GAJS,EAIJyC,EAASH,KAA7BK,EAAM,EAANA,OAAQC,EAAO,EAAPA,QACF,MAAVD,EAAc,iBAII,OAHpBlC,EAAgB,IAChBD,GAA2B,GAC3BE,EAAW,IACXH,GAAa,GAAO,6BAWtB,OAPAA,GAAa,GAIbE,EAAgB,SAChBC,EAAWkC,GACXpC,GAA2B,GAC3B,iEAGH,mDAlCI,IAmCJsC,OAAM,SAACC,GACNR,QAAQC,IAAIO,GACZI,EAAiB,IACjB1C,EAAgB,IAChBF,GAAa,GACbG,EAAW,IACXsC,MAAM,sBAxERA,MAAM,+BAiGmD,kC,wBCxFhDM,MAtBf,SAAiBhD,GACf,IAAQiD,EAAwBjD,EAAxBiD,QAASC,EAAelD,EAAfkD,KAAMlC,EAAShB,EAATgB,KACnBmC,EAAUnD,EAAMmD,SAAW,GACzBC,EAAQpD,EAAMoD,OAAS,OACzBC,EAASrD,EAAMoD,MAEnB,OACE,sBAAKzC,UAAS,kBAAawC,EAAO,YAAIF,EAAU,GAAK,QAAS,UAC5D,cAAC,IAAM,CACLjC,KAAMA,EACNoC,MAAOA,EACPE,OAAQ,GACRC,MAAO,GACPC,QAAS,IAEX,sBAAMC,MAAOJ,EAAS,CAAED,MAAOA,GAAU,GAAIM,MAAM,eAAc,SAC9DR,QCsCMS,G,MA7DE,SAAC3D,GACuCA,EAA/C4D,cAA+C5D,EAAhC6D,aAAgC7D,EAAlBgB,KAArC,IAA2CsB,EAAYtC,EAAZsC,QAUrCwB,EAAY,uCAAG,WAAOC,GAAG,wEACvBC,EAAIC,SAASC,cAAc,MAC/BC,aAAa,OAAQJ,GACvBC,EAAEG,aAAa,SAAU,UACzBH,EAAEG,aAAa,MAAO,uBAItBH,EAAEI,cAAc,IAAIC,WAAW,QAAS,CAAEC,SAAS,KAOnD,2CACD,gBAhBiB,sCAkBZC,EAAQ,uCAAG,4BAAAP,EAAA,sDACTD,EAAG,UHxBU,sBGwBG,oBAAYzB,EAAO,QACzCwB,EAAaC,GAoBb,2CACD,kBAvBa,mCAyBd,OACE,qBAAKpD,UAAU,WAAU,SACvB,wBAAQO,QAASqD,EAAS,0BC7CjBC,G,MAZA,SAACxE,GACd,OACE,sBAAKW,UAAU,SAAQ,UACrB,6BAAKX,EAAM6D,eACX,8BACG7D,EAAMyE,eAAiBzE,EAAMyE,eAAiB,EAAC,oCCgEzCC,MA9Df,WACE,MAA8DrE,oBAAS,GAAM,mBAAtEsE,EAAuB,KAAEzE,EAA0B,KAC1D,EAAkCG,oBAAS,GAAM,mBAA1CuE,EAAS,KAAE3E,EAAY,KAC9B,EAA8BI,mBAAS,OAAM,mBAAtCuC,EAAO,KACd,GAD0B,KACFvC,mBAAS,UAAQ,mBAAlCW,EAAI,KACX,GADoB,KACUX,mBAAS,KAAG,mBAAnCiC,EAAO,KAAElC,EAAU,KAE1B,EAA0CC,mBAAS,IAAG,mBAA/CuD,EAAa,KAAEf,EAAgB,KACtC,EAAwCxC,mBAAS,IAAG,mBAA7CwD,EAAY,KAAE1D,EAAe,KACpC,EAA4CE,mBAAS,GAAE,mBAAhDoE,EAAc,KAAEI,EAAiB,KAExC,OACE,sBAAKlE,UAAU,MAAK,UAClB,cAAC,EAAQ,CACPiC,QAASA,EACT5B,KAAMA,EACNf,aAAcA,EACdC,2BAA4BA,EAC5B2C,iBAAkBA,EAClB1C,gBAAiBA,EACjB0E,kBAAmBA,EACnBzE,WAAYA,IAEd,qBAAKO,UAAU,KAAI,gBACnB,qBAAKA,UAAU,wBAAuB,+CAGtC,cAAC,EAAgB,CACfiC,QAASA,EACT5B,KAAMA,EACNf,aAAcA,EACdC,2BAA4BA,EAC5B2C,iBAAkBA,EAClB1C,gBAAiBA,EACjBC,WAAYA,IAEd,cAAC,EAAO,CACN+C,QAAQ,eACRF,QAAS2B,EACT1B,KAAM,UACNlC,KAAK,UACLoC,MAAM,UAEPuB,EACC,cAAC,EAAQ,CACP3D,KAAMA,EACN4C,cAAeA,EACfC,aAAcA,EACdvB,QAASA,IAGX,GAEiB,GAAlBmC,EACC,cAAC,EAAM,CAACZ,aAAcA,EAAcY,eAAgBA,IAEpD,OC5DRK,IAASC,OAEP,cAAC,EAAG,IAEJd,SAASe,eAAe,W","file":"static/js/main.9b4ff90b.chunk.js","sourcesContent":["const promiseSetTimeOut = (time) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve();\r\n    }, time);\r\n  });\r\n};\r\n\r\nexport { promiseSetTimeOut };\r\n","import { useState } from \"react\";\r\nimport \"./Playlist.css\";\r\nimport { HOST } from \"./constants\";\r\nimport { promiseSetTimeOut } from \"./helper\";\r\n\r\nconst Playlist = (props) => {\r\n  const {\r\n    setIsLoading,\r\n    setIsDownloadLinkAvailable,\r\n    // setDownloadLinks,\r\n    setPlaylistName,\r\n    setBinname,\r\n    // setPlaylistLength,\r\n  } = props;\r\n\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const generateLink = () => {\r\n    const regex = /http[s]?[:]\\/\\/open\\.spotify\\.com\\/playlist\\/.+[/?]/;\r\n    // const regexM = /http[s]?[:]\\/\\/m\\.youtube\\.com\\/playlist[?]list[=].+/;\r\n    if (!regex.test(input)) {\r\n      alert(\"Invalid playlist link\");\r\n      return;\r\n    }\r\n\r\n    let input1 = input;\r\n    // if (regexM.test(input)) {\r\n    //   input1 = input.replace(\"m\", \"www\");\r\n    // }\r\n\r\n    setIsLoading(true);\r\n    setIsDownloadLinkAvailable(false);\r\n    fetch(`${HOST}/getDownloadLinksPlaylist`, {\r\n      method: \"post\",\r\n      mode: \"cors\",\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        playlistURL: input1,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then(async (data) => {\r\n        console.log(data);\r\n\r\n        while (true) {\r\n          await promiseSetTimeOut(3000);\r\n          const res = await fetch(`${HOST}/getResponseState`);\r\n          const mainData = await res.json();\r\n          // .then((res) => res.json())\r\n          // .then((mainData) => {\r\n          console.log(\"mainData \", mainData);\r\n          if (mainData.state === false) {\r\n            await promiseSetTimeOut(20000);\r\n            continue;\r\n          }\r\n\r\n          // const { videoList, playListName, audioList } = mainData.data?.[0];\r\n          const { status, binname, playListName } = mainData.data;\r\n          setIsLoading(false);\r\n          if (status != \"ok\") {\r\n            console.log(status);\r\n            setPlaylistName(playListName);\r\n            setBinname(binname);\r\n            setIsLoading(false);\r\n            // setIsDownloadLinkAvailable(true);\r\n            break;\r\n          }\r\n          // setDownloadLinks(videoList);\r\n          // setPlaylistLength(videoList.length);\r\n          setPlaylistName(playListName);\r\n          setIsDownloadLinkAvailable(true);\r\n          setIsLoading(false);\r\n          setBinname(binname);\r\n\r\n          break;\r\n          // })\r\n        }\r\n      })\r\n\r\n      .catch((err) => {\r\n        // setDownloadLinks([]);\r\n        setPlaylistName(\"\");\r\n        // setPlaylistLength(0);\r\n        console.log(err);\r\n        setIsLoading(false);\r\n        setBinname(\"\");\r\n        alert(\"some error\");\r\n      });\r\n  };\r\n\r\n  const isInputDisabled = () => {\r\n    if (input.length >= 4 && input.substr(0, 4) === \"http\") {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Playlist\">\r\n      <div className=\"playlistInput\">\r\n        <input\r\n          onChange={(e) => {\r\n            setInput(e.target.value);\r\n          }}\r\n          className=\"inputLink\"\r\n          type=\"text\"\r\n          placeholder=\"Insert the url of spotify playlist\"\r\n        />\r\n        <button\r\n          className={`${isInputDisabled() ? \"disabled\" : \"\"}`}\r\n          onClick={isInputDisabled() ? () => {} : generateLink}\r\n        >\r\n          Generate Link\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Playlist;\r\n","// export const HOST = \"http://localhost:8080\";\r\n// export const HOST = \"http://192.168.29.234:8081\";\r\n// export const HOST = \"https://puppettertest-production.up.railway.app\";\r\n// export const HOST = \"https://fine-pink-hen-kilt.cyclic.app\";\r\n// export const HOST = \"https://puppetter-test.vercel.app\";\r\n// export const HOST = \"https://puppeteer-test-zoqc.onrender.com\";\r\n// export const HOST = \"https://seasoned-pyrite-cent.glitch.me\";\r\n// export const HOST = \"https://21x48h.deta.dev\";\r\n\r\nexport const binHOST = \"https://filebin.net\";\r\nexport const HOST = \"\";\r\n","import { useState } from \"react\";\r\nimport \"./IndividualVideos.css\";\r\nimport { HOST } from \"./constants\";\r\nimport { promiseSetTimeOut } from \"./helper\";\r\n\r\nconst IndividualVideos = (props) => {\r\n  const {\r\n    quality,\r\n    type,\r\n    setIsLoading,\r\n    setIsDownloadLinkAvailable,\r\n    setDownloadLinks,\r\n    setPlaylistName,\r\n    setBinname,\r\n  } = props;\r\n\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const generateLink = () => {\r\n    const regex = /http[s]?[:]\\/\\/open\\.spotify\\.com\\/track\\/.+[/?]/;\r\n    // const regex = /http[s]?[:]\\/\\/www\\.youtube\\.com\\/watch[?]v[=].+/;\r\n    // const regexM = /http[s]?[:]\\/\\/m\\.youtube\\.com\\/watch[?]v[=].+/;\r\n    if (!regex.test(input)) {\r\n      alert(\"Invalid spotify track link\");\r\n      return;\r\n    }\r\n\r\n    // if (!regex.test(input) ) {\r\n    //   alert(\"Invalid playlist link\");\r\n    //   return;\r\n    // }\r\n\r\n    // let input1 = input;\r\n    // if (regexM.test(input)) {\r\n    //   input1 = input.replace(\"m\", \"www\");\r\n    // }\r\n\r\n    const tracks = input.split(\",\");\r\n\r\n    setIsLoading(true);\r\n    setIsDownloadLinkAvailable(false);\r\n\r\n    fetch(`${HOST}/getDownloadLinksIndividual`, {\r\n      method: \"post\",\r\n      mode: \"cors\",\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n      },\r\n\r\n      body: JSON.stringify({\r\n        tracks,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then(async (data) => {\r\n        // debugger;\r\n        console.log(data);\r\n        while (true) {\r\n          await promiseSetTimeOut(1000);\r\n          const res = await fetch(`${HOST}/getResponseState`);\r\n          const mainData = await res.json();\r\n          // .then((res) => res.json())\r\n          // .then((mainData) => {\r\n          console.log(\"mainData \", mainData);\r\n          if (mainData.state === false) {\r\n            await promiseSetTimeOut(10000);\r\n            continue;\r\n          }\r\n\r\n          const { status, binname } = mainData.data;\r\n          if (status != \"ok\") {\r\n            setPlaylistName(\"\");\r\n            setIsDownloadLinkAvailable(false);\r\n            setBinname(\"\");\r\n            setIsLoading(false);\r\n            break;\r\n          }\r\n\r\n          setIsLoading(false);\r\n          // if (mainData.data.length > 0) {\r\n          // setDownloadLinks(mainData.data);\r\n\r\n          setPlaylistName(\"songs\");\r\n          setBinname(binname);\r\n          setIsDownloadLinkAvailable(true);\r\n          // }\r\n          break;\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setDownloadLinks([]);\r\n        setPlaylistName(\"\");\r\n        setIsLoading(false);\r\n        setBinname(\"\");\r\n        alert(\"some error\");\r\n      });\r\n  };\r\n\r\n  const isInputDisabled = () => {\r\n    if (input.length >= 4 && input.substr(0, 4) === \"http\") {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"IndividualVideos\">\r\n      <div className=\"videosInput\">\r\n        <input\r\n          onChange={(e) => {\r\n            setInput(e.target.value);\r\n          }}\r\n          className=\"inputLink\"\r\n          type=\"text\"\r\n          placeholder=\"Insert spotify track links separated by commas\"\r\n        />\r\n        <button\r\n          className={`${isInputDisabled() ? \"disabled\" : \"\"}`}\r\n          onClick={isInputDisabled() ? () => {} : generateLink}\r\n        >\r\n          Generate Link\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IndividualVideos;\r\n","import \"./Spinner.css\";\r\n\r\n// use 'npm i react-loader-spinner@4.0.0\r\nimport Loader from \"react-loader-spinner\";\r\n\r\n// expected props:\r\n// visible: boolean ,\r\n// classes: string,\r\n// color: string,\r\n// text: string\r\nfunction Spinner(props) {\r\n  const { visible, text, type } = props;\r\n  let classes = props.classes || \"\";\r\n  const color = props.color || \"#fff\";\r\n  let color1 = props.color;\r\n  //   console.log(\"is spinner visible: \", visible);\r\n  return (\r\n    <div className={`Spinner ${classes} ${visible ? \"\" : \"none\"}`}>\r\n      <Loader\r\n        type={type}\r\n        color={color}\r\n        height={50}\r\n        width={50}\r\n        timeout={0} //30 secs\r\n      />\r\n      <span style={color1 ? { color: color } : {}} class=\"Loading_Text\">\r\n        {text}\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Spinner;\r\n","import \"./Download.css\";\r\nimport { binHOST } from \"./constants\";\r\n\r\nconst Download = (props) => {\r\n  const { downloadLinks, playlistName, type, binname } = props;\r\n\r\n  const promiseSetTimeOut = (time) => {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve();\r\n      }, time);\r\n    });\r\n  };\r\n\r\n  const mainDownload = async (url) => {\r\n    const a = document.createElement(\"a\");\r\n    a.setAttribute(\"href\", url);\r\n    a.setAttribute(\"target\", \"_blank\");\r\n    a.setAttribute(\"rel\", \"noopener noreferrer\");\r\n    // document.body.append(a);\r\n\r\n    // a.click();\r\n    a.dispatchEvent(new MouseEvent(\"click\", { ctrlKey: true }));\r\n    // document.body.remove(\"a\");\r\n    // window.open(url, \"_blank\").blur();\r\n    // if (type === \"audio\") {\r\n    //   await promiseSetTimeOut(3000);\r\n    // } else {\r\n    //   await promiseSetTimeOut(10000);\r\n    // }\r\n  };\r\n\r\n  const download = async () => {\r\n    const url = `${binHOST}/archive/${binname}/zip`;\r\n    mainDownload(url);\r\n    // fetch(\"https://proxy.cors.sh/https://acme.com\", {\r\n    //   headers: {\r\n    //     \"x-cors-api-key\": \"temp_6ed182fc89f2d7dc756368139fed3299\",\r\n    //   },\r\n    // });\r\n\r\n    // const proxy = \"https://proxy.cors.sh\";\r\n    // const key = \"temp_6ed182fc89f2d7dc756368139fed3299\";\r\n\r\n    // const res = await fetch(\r\n    //   `http://www.whateverorigin.org/get?url=http://www.google.com`\r\n    // );\r\n    // const res = await fetch(`${binHOST}/archive/${binname}/zip`);\r\n    // const res = await fetch(`${proxy}/${binHOST}/archive/${binname}/zip`, {\r\n    //   headers: {\r\n    //     \"x-cors-api-key\": key,\r\n    //   },\r\n    // });\r\n    // const blob = res.blob();\r\n    // const url = URL.createObjectURL(blob);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Download\">\r\n      <button onClick={download}>Download</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Download;\r\n","import \"./Result.css\";\r\n\r\nconst Result = (props) => {\r\n  return (\r\n    <div className=\"Result\">\r\n      <h3>{props.playlistName}</h3>\r\n      <p>\r\n        {props.playlistLength ? props.playlistLength : 0} videos found in\r\n        playlist\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import { useState, useEffect, useRef } from \"react\";\r\nimport \"./App.css\";\r\nimport Playlist from \"./Playlist\";\r\nimport IndividualVideos from \"./IndividualVideos\";\r\nimport Spinner from \"./Spinner\";\r\nimport Download from \"./Download\";\r\n\r\nimport Result from \"./Result\";\r\n\r\nfunction App() {\r\n  const [isDownloadLinkAvailable, setIsDownloadLinkAvailable] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [quality, setQuality] = useState(\"480\");\r\n  const [type, setType] = useState(\"video\"); // ['audio','video']\r\n  const [binname, setBinname] = useState(\"\");\r\n\r\n  const [downloadLinks, setDownloadLinks] = useState([]);\r\n  const [playlistName, setPlaylistName] = useState(\"\"); // ['audios','videos','<actualName>']\r\n  const [playlistLength, setPlaylistLength] = useState(0);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Playlist\r\n        quality={quality}\r\n        type={type}\r\n        setIsLoading={setIsLoading}\r\n        setIsDownloadLinkAvailable={setIsDownloadLinkAvailable}\r\n        setDownloadLinks={setDownloadLinks}\r\n        setPlaylistName={setPlaylistName}\r\n        setPlaylistLength={setPlaylistLength}\r\n        setBinname={setBinname}\r\n      />\r\n      <div className=\"OR\">OR</div>\r\n      <div className=\"labelIndividualVideos\">\r\n        For downloading tracks separately\r\n      </div>\r\n      <IndividualVideos\r\n        quality={quality}\r\n        type={type}\r\n        setIsLoading={setIsLoading}\r\n        setIsDownloadLinkAvailable={setIsDownloadLinkAvailable}\r\n        setDownloadLinks={setDownloadLinks}\r\n        setPlaylistName={setPlaylistName}\r\n        setBinname={setBinname}\r\n      />\r\n      <Spinner\r\n        classes=\"center mgtop\"\r\n        visible={isLoading}\r\n        text={\"Loading\"}\r\n        type=\"Circles\"\r\n        color=\"black\"\r\n      />\r\n      {isDownloadLinkAvailable ? (\r\n        <Download\r\n          type={type}\r\n          downloadLinks={downloadLinks}\r\n          playlistName={playlistName}\r\n          binname={binname}\r\n        />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {playlistLength != 0 ? (\r\n        <Result playlistName={playlistName} playlistLength={playlistLength} />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  /* </React.StrictMode> */\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}